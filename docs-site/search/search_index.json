{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PeterPortal Public API provides software developers with easy-access to UC Irvine publicly available data such as: courses information, professor information, grade distribution, and schedule of classes. \ud83d\udd28 Built with: Express.js GraphQL \ud83d\udc6f\u200d\u2642\ufe0f Works with: ElasticSearch SQL Our Misson \ud83c\udf87 Our mission is to improve the UCI student experience with course planning and encourage student software developers to create open-source applications that are beneficial to the Anteater community. Features Peterportal Public API offers two Web APIs to help you build your app! RESTful API GraphQL API Where does the data come from? We consolidate our data directly from official UCI sources such as: UCI Catalogue, UCI Public Records Office, and UCI Webreg. We routinely monitor for updates to ensure you get the most accurate information to serve on your application. Disclaimer \ud83d\udc69\u200d\ud83d\udcbb We are currently in the early stages for this project. Anyone is welcome to integrate this API into your project as a tool. However, if you choose to do so, please be aware that this project is currently in its early release phase. Every user will be considered as testers and are highly encouraged to do their part and submit a bug report if you encounter any issues. Our team will respond as quickly as possible to resolve the issue. Bug If you encountered any issues or bug, please open an issue @ https://github.com/icssc-projects/peterportal-public-api/issues/new Other Disclaimer Although we consolidate our data directly from official UCI sources, this application is by all means, not an official UCI tool. We stride to keep our data as accurate as possible with the limited support we have from UCI. Please take that into consideration while using this API. Terms & Conditions There are no hard policies at the moment for utilizing this tool. However, please refrain from abusing the API by methods such as: sending excessive amount of requests in a small period of time or purposely looking to exploit the system. This tool is here mainly to assist developers in bringing their idea to life to benefit all UCI students. Please don't ruin it for others! \ud83d\ude42","title":"Home"},{"location":"#features","text":"Peterportal Public API offers two Web APIs to help you build your app! RESTful API GraphQL API","title":"Features"},{"location":"#where-does-the-data-come-from","text":"We consolidate our data directly from official UCI sources such as: UCI Catalogue, UCI Public Records Office, and UCI Webreg. We routinely monitor for updates to ensure you get the most accurate information to serve on your application.","title":"Where does the data come from?"},{"location":"#disclaimer","text":"\ud83d\udc69\u200d\ud83d\udcbb We are currently in the early stages for this project. Anyone is welcome to integrate this API into your project as a tool. However, if you choose to do so, please be aware that this project is currently in its early release phase. Every user will be considered as testers and are highly encouraged to do their part and submit a bug report if you encounter any issues. Our team will respond as quickly as possible to resolve the issue. Bug If you encountered any issues or bug, please open an issue @ https://github.com/icssc-projects/peterportal-public-api/issues/new Other Disclaimer Although we consolidate our data directly from official UCI sources, this application is by all means, not an official UCI tool. We stride to keep our data as accurate as possible with the limited support we have from UCI. Please take that into consideration while using this API. Terms & Conditions There are no hard policies at the moment for utilizing this tool. However, please refrain from abusing the API by methods such as: sending excessive amount of requests in a small period of time or purposely looking to exploit the system. This tool is here mainly to assist developers in bringing their idea to life to benefit all UCI students. Please don't ruin it for others! \ud83d\ude42","title":"Disclaimer"},{"location":"Contributing/documenting/","text":"Documentation \ud83e\udd14 Documentation for the documentation. How do you contribute to the documentation? The documentation you see right now is created via MkDocs . We use a specific extension called Material for MkDocs which is what makes this site look pretty. For GraphQL documentation, the playground generates the documentation for us automatically. Writing Documentation \ud83d\udcdd Writing documentation is simple with MkDocs. Open up the project, and navigate to the /docs folder. Make your changes to the markdown ( .md ) files within this folder. Create a pull request to master . Once your pull request is merged with master , the documentation site will be automatically rebuilt. How is the docs site updated? All documentation site files are built within /docs-site . The docs are run through a CI pipeline through CircleCI , that will automatically build the documentation into the /docs-site folder. This build is run through a command by the MkDocs python package. Designing Documentation \u2728 Make your documentation user-friendly. \ud83d\udc40 Preview your changes live. \ud83d\udc0d Our documentation website is made through Material for MkDocs , a python package. To setup mkdocs-material , see their cool instructions . Configure documentation site settings in /mkdocs.yml .","title":"Documenting"},{"location":"Contributing/documenting/#documentation","text":"\ud83e\udd14 Documentation for the documentation. How do you contribute to the documentation? The documentation you see right now is created via MkDocs . We use a specific extension called Material for MkDocs which is what makes this site look pretty. For GraphQL documentation, the playground generates the documentation for us automatically.","title":"Documentation"},{"location":"Contributing/documenting/#writing-documentation","text":"\ud83d\udcdd Writing documentation is simple with MkDocs. Open up the project, and navigate to the /docs folder. Make your changes to the markdown ( .md ) files within this folder. Create a pull request to master . Once your pull request is merged with master , the documentation site will be automatically rebuilt. How is the docs site updated? All documentation site files are built within /docs-site . The docs are run through a CI pipeline through CircleCI , that will automatically build the documentation into the /docs-site folder. This build is run through a command by the MkDocs python package.","title":"Writing Documentation"},{"location":"Contributing/documenting/#designing-documentation","text":"\u2728 Make your documentation user-friendly. \ud83d\udc40 Preview your changes live. \ud83d\udc0d Our documentation website is made through Material for MkDocs , a python package. To setup mkdocs-material , see their cool instructions . Configure documentation site settings in /mkdocs.yml .","title":"Designing Documentation"},{"location":"Contributing/how_to_contribute/","text":"How to Contribute Setup If you're wondering how to contribute to open source project and this is your first time, you're at the right place. First, you'll want to fork the repository to your own account. You can do that by clicking the fork button in the top right of our repository . Clone the forked respository to your local machine. Click the green Code button, and copy the URL. Open up a terminal on your local computer to where you want the repository to be and enter: git clone PASTED_URL_HERE It should look like this: git clone https://github.com/your-username/peterportal-public-api.git Navigate to the respository by entering cd peterportal-public-api Add the project repository as the \"upstream\" remote. You can do that by entering this command: git remote add upstream https://github.com/icssc-projects/peterportal-public-api.git Use git remote -v to check that you have 2 remotes. An origin that points to your forked repository on your account, and upstream that points to this project repository. Update your repo with the latest changes by running: git pull upstream master Create a new branch that you will work on. You will usually name the branch something related to the issue you are solving (i.e. doc-fix ). git checkout -b BRANCH_NAME Make some changes and commits. Once you're done push your changes to your fork. git push origin BRANCH_NAME Once you've made all the changes you need, you can create a pull request. Open your forked repository and switch to the branch you were working on. Click the New Pull Request button. Fill out the Pull Request template including details about your changes. Once you're done, create the pull request. Eventually a project maintainer will review the PR. New changes might be requested, in which case you can make new commits for them. Once the pull request is approved, it will be merged, and your changes will be added to the project's master branch. You have officially made a contribution to our project. Thank you! Once the changes go through, you can delete the old branch, and update your local respository and push the update to your forked respository. git pull upstream master git push origin master Now, you are ready to make even more contributions! Repo Overview Folder/File Purpose /cache Houses the local data cache /db Houses grades data cache /docs Markdown files for documentation /docs-site Built HTML files for documentation /graphql GraphQL schema files /helpers Helper methods for both APIs /public Assets to be accessible via Public URL /rest Contains the routes of our REST API /tests Jest test files /utils Utilities for data changes app.js Configuration for Express mkdocs.yml Configuration for MkDocs server.js Starting server locally for development Additional Resources https://www.dataschool.io/how-to-contribute-on-github/ https://opensource.guide/how-to-contribute/ https://github.com/freeCodeCamp/how-to-contribute-to-open-source","title":"How to Contribute"},{"location":"Contributing/how_to_contribute/#how-to-contribute","text":"","title":"How to Contribute"},{"location":"Contributing/how_to_contribute/#setup","text":"If you're wondering how to contribute to open source project and this is your first time, you're at the right place. First, you'll want to fork the repository to your own account. You can do that by clicking the fork button in the top right of our repository . Clone the forked respository to your local machine. Click the green Code button, and copy the URL. Open up a terminal on your local computer to where you want the repository to be and enter: git clone PASTED_URL_HERE It should look like this: git clone https://github.com/your-username/peterportal-public-api.git Navigate to the respository by entering cd peterportal-public-api Add the project repository as the \"upstream\" remote. You can do that by entering this command: git remote add upstream https://github.com/icssc-projects/peterportal-public-api.git Use git remote -v to check that you have 2 remotes. An origin that points to your forked repository on your account, and upstream that points to this project repository. Update your repo with the latest changes by running: git pull upstream master Create a new branch that you will work on. You will usually name the branch something related to the issue you are solving (i.e. doc-fix ). git checkout -b BRANCH_NAME Make some changes and commits. Once you're done push your changes to your fork. git push origin BRANCH_NAME Once you've made all the changes you need, you can create a pull request. Open your forked repository and switch to the branch you were working on. Click the New Pull Request button. Fill out the Pull Request template including details about your changes. Once you're done, create the pull request. Eventually a project maintainer will review the PR. New changes might be requested, in which case you can make new commits for them. Once the pull request is approved, it will be merged, and your changes will be added to the project's master branch. You have officially made a contribution to our project. Thank you! Once the changes go through, you can delete the old branch, and update your local respository and push the update to your forked respository. git pull upstream master git push origin master Now, you are ready to make even more contributions!","title":"Setup"},{"location":"Contributing/how_to_contribute/#repo-overview","text":"Folder/File Purpose /cache Houses the local data cache /db Houses grades data cache /docs Markdown files for documentation /docs-site Built HTML files for documentation /graphql GraphQL schema files /helpers Helper methods for both APIs /public Assets to be accessible via Public URL /rest Contains the routes of our REST API /tests Jest test files /utils Utilities for data changes app.js Configuration for Express mkdocs.yml Configuration for MkDocs server.js Starting server locally for development","title":"Repo Overview"},{"location":"Contributing/how_to_contribute/#additional-resources","text":"https://www.dataschool.io/how-to-contribute-on-github/ https://opensource.guide/how-to-contribute/ https://github.com/freeCodeCamp/how-to-contribute-to-open-source","title":"Additional Resources"},{"location":"Contributing/start_here/","text":"Contributing PeterPortal API is an open source project, hosted on Github , created by the ICS Student Council Projects Committee at UCI. We welcome anyone to contribute to our project and improve our API. Our goal is to encourage more students and developers to create applications beneficial to the UCI community. Want to get Involved? We would love for you to help us out! You can look to contribute to this open source project on GitHub. Our repository can be found here . If your looking to join our team and be even more involved, ICS Student Council recruits students at the beginning of every school year to their committees. For more information, please visit https://studentcouncil.ics.uci.edu/ . What should you work on? You can check out which issues we need help on our repo . Check out these issues we have labeled help wanted . If you're a beginner, I would recommend looking at some good first issues . How to get in touch? If you have feature requests, questions, ideas, and want to contribute, there are multiple channels you can communicate with us. GitHub Repository: https://github.com/icssc-projects/peterportal-public-api Issues and Bugs Feature Requests Discord Join our discord ! Most of our communication is done on the ICSSC Projects Discord. The server also includes other projects we work on, such as Antalmanac and Zotistics . Medium Blog: https://icsscprojects.medium.com/ Project News Tutorials","title":"Start Here"},{"location":"Contributing/start_here/#contributing","text":"PeterPortal API is an open source project, hosted on Github , created by the ICS Student Council Projects Committee at UCI. We welcome anyone to contribute to our project and improve our API. Our goal is to encourage more students and developers to create applications beneficial to the UCI community.","title":"Contributing"},{"location":"Contributing/start_here/#want-to-get-involved","text":"We would love for you to help us out! You can look to contribute to this open source project on GitHub. Our repository can be found here . If your looking to join our team and be even more involved, ICS Student Council recruits students at the beginning of every school year to their committees. For more information, please visit https://studentcouncil.ics.uci.edu/ .","title":"Want to get Involved?"},{"location":"Contributing/start_here/#what-should-you-work-on","text":"You can check out which issues we need help on our repo . Check out these issues we have labeled help wanted . If you're a beginner, I would recommend looking at some good first issues .","title":"What should you work on?"},{"location":"Contributing/start_here/#how-to-get-in-touch","text":"If you have feature requests, questions, ideas, and want to contribute, there are multiple channels you can communicate with us.","title":"How to get in touch?"},{"location":"Contributing/start_here/#github","text":"Repository: https://github.com/icssc-projects/peterportal-public-api Issues and Bugs Feature Requests","title":" GitHub"},{"location":"Contributing/start_here/#discord","text":"Join our discord ! Most of our communication is done on the ICSSC Projects Discord. The server also includes other projects we work on, such as Antalmanac and Zotistics .","title":" Discord"},{"location":"Contributing/start_here/#medium","text":"Blog: https://icsscprojects.medium.com/ Project News Tutorials","title":" Medium"},{"location":"GraphQL-API/learn_more/","text":"Learn More What is GraphQL? GraphQL is a query language for APIs. It provides the user exactly what they need and nothing more. What's so special about GraphQL? Here are some of it's defining features: Ask for exactly what you need, and you will get exactly that. Anything GraphQL returns is completely predictable. Get multiple resources in only one request. Unlike REST, a single request can return multiple resources. Know exactly what's possible. With types and fields, you can always know what went wrong in a request. How do I use GraphQL? To make a request to our graphql endpoint, you simply make a POST request, passing the query string in the body of the request. curl $ curl 'https://api.peterportal.org/graphql' \\ -H 'Content-Type: application/json' \\ -d '{\"query\":\"query { course(id:\\\"COMPSCI161\\\") { id title department }}\"}' { \"data\": { \"course\": { \"id\": \"COMPSCI161\", \"title\": \"Design and Analysis of Algorithms\", \"department\": \"COMPSCI\" } } } python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests, json # >>>$ body = { 'query' : 'query { course(id:\"COMPSCI161\") { id title department }}' } # >>>$ headers ={ \"Content-Type\" : \"application/json\" } # >>>$ response = requests.post ( \"https://api.peterportal.org/graphql\" , data = json.dumps ( body ) , headers = headers ) # >>>$ response.json () { \"data\": { \"course\": { \"id\": \"COMPSCI161\", \"title\": \"Design and Analysis of Algorithms\", \"department\": \"COMPSCI\" } } } If you want to learn about how GraphQL works, you can check out their website that goes over the language. https://graphql.org/learn/ Here, we will talk more about how to use GraphQL for the PeterPortal API. I recommend opening our GraphQL playground to test queries and get familiar. Please note that all of this information and much more is found in the DOCS tab in the playground. Tutorial Queries Our API has 6 queries you can use to make a request for data. course instructor allCourses allInstructors schedule grades Each query returns an object of a certain type. For example, a course query will return a Course type, and an allCourses query will return a list of Course types. Based on the type, different fields can be specified. A Course type would have a field like title or department . By specifying which fields, the client will only receive those fields in the response. To find more about what fields each type has, check out the documentation in the playground. Some queries require arguments that will like our REST endpoints have parameters. This will help specify which course or instructor you want in a query. Example In this example, the course query returns the ID , title , and department of the course COMPSCI 161 , based on the argument passed. query { course(id:\"COMPSCI161\") { id title department } } Nested Objects One of the main features of GraphQL is being able to nest objects and fields inside a query. This will let the client get multiple resources in only one request. For example, a Course type will have a list of CourseOffering types, which are instances of the course in UCI's schedule of classes. CourseOffering types can also have nested types, like Meeting , which hold information about when a class meets. Almost all objects are linked to other objects in different ways. A Course will have multiple Instructors in its instructor_history , and an Instructor will have multiple Courses in its course_history . Example In this example, the course query requests a list of Instructors that taught the course, and all the Courses that these instructors taught as well. query { course(id:\"COMPSCI161\") { instructor_history { name email course_history { id title } } } } These are the basics of using GraphQL for the PeterPortal API. However, GraphQL really has so much more to offer, and if you're looking to learn more about this new technology, we highly recommend checking out their website, https://graphql.org/ . There are links to so many more tutorials, examples and more. To build our GraphQL endpoint, we used GraphQL.js , a node module you can use to create your own GraphQL API.","title":"Learn More"},{"location":"GraphQL-API/learn_more/#learn-more","text":"","title":"Learn More"},{"location":"GraphQL-API/learn_more/#what-is-graphql","text":"GraphQL is a query language for APIs. It provides the user exactly what they need and nothing more. What's so special about GraphQL? Here are some of it's defining features: Ask for exactly what you need, and you will get exactly that. Anything GraphQL returns is completely predictable. Get multiple resources in only one request. Unlike REST, a single request can return multiple resources. Know exactly what's possible. With types and fields, you can always know what went wrong in a request.","title":"What is GraphQL?"},{"location":"GraphQL-API/learn_more/#how-do-i-use-graphql","text":"To make a request to our graphql endpoint, you simply make a POST request, passing the query string in the body of the request. curl $ curl 'https://api.peterportal.org/graphql' \\ -H 'Content-Type: application/json' \\ -d '{\"query\":\"query { course(id:\\\"COMPSCI161\\\") { id title department }}\"}' { \"data\": { \"course\": { \"id\": \"COMPSCI161\", \"title\": \"Design and Analysis of Algorithms\", \"department\": \"COMPSCI\" } } } python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests, json # >>>$ body = { 'query' : 'query { course(id:\"COMPSCI161\") { id title department }}' } # >>>$ headers ={ \"Content-Type\" : \"application/json\" } # >>>$ response = requests.post ( \"https://api.peterportal.org/graphql\" , data = json.dumps ( body ) , headers = headers ) # >>>$ response.json () { \"data\": { \"course\": { \"id\": \"COMPSCI161\", \"title\": \"Design and Analysis of Algorithms\", \"department\": \"COMPSCI\" } } } If you want to learn about how GraphQL works, you can check out their website that goes over the language. https://graphql.org/learn/ Here, we will talk more about how to use GraphQL for the PeterPortal API. I recommend opening our GraphQL playground to test queries and get familiar. Please note that all of this information and much more is found in the DOCS tab in the playground.","title":"How do I use GraphQL?"},{"location":"GraphQL-API/learn_more/#tutorial","text":"","title":"Tutorial"},{"location":"GraphQL-API/learn_more/#queries","text":"Our API has 6 queries you can use to make a request for data. course instructor allCourses allInstructors schedule grades Each query returns an object of a certain type. For example, a course query will return a Course type, and an allCourses query will return a list of Course types. Based on the type, different fields can be specified. A Course type would have a field like title or department . By specifying which fields, the client will only receive those fields in the response. To find more about what fields each type has, check out the documentation in the playground. Some queries require arguments that will like our REST endpoints have parameters. This will help specify which course or instructor you want in a query. Example In this example, the course query returns the ID , title , and department of the course COMPSCI 161 , based on the argument passed. query { course(id:\"COMPSCI161\") { id title department } }","title":"Queries"},{"location":"GraphQL-API/learn_more/#nested-objects","text":"One of the main features of GraphQL is being able to nest objects and fields inside a query. This will let the client get multiple resources in only one request. For example, a Course type will have a list of CourseOffering types, which are instances of the course in UCI's schedule of classes. CourseOffering types can also have nested types, like Meeting , which hold information about when a class meets. Almost all objects are linked to other objects in different ways. A Course will have multiple Instructors in its instructor_history , and an Instructor will have multiple Courses in its course_history . Example In this example, the course query requests a list of Instructors that taught the course, and all the Courses that these instructors taught as well. query { course(id:\"COMPSCI161\") { instructor_history { name email course_history { id title } } } } These are the basics of using GraphQL for the PeterPortal API. However, GraphQL really has so much more to offer, and if you're looking to learn more about this new technology, we highly recommend checking out their website, https://graphql.org/ . There are links to so many more tutorials, examples and more. To build our GraphQL endpoint, we used GraphQL.js , a node module you can use to create your own GraphQL API.","title":"Nested Objects"},{"location":"GraphQL-API/start_here/","text":"Start here GraphQL is not an application; rather, it is a Query Language for Web APIs. Try it out To make a request simply send a POST request to our graphql endpoint, https://api.peterportal.org/graphql/ You can try out our API live at our GraphQL Playground . Not only can you try it out, but our Playground also has the most up-to-date docs -- we highly recommend you check it out if you're interested in learning GraphQL or using our endpoint. Example Query Here is an example which returns the ID, title, and department of every course in our database. You can paste this into our GraphQL Playground , or write this in the body of a POST request. query { allCourses { id title department } } Documentation \ud83d\udcc3 Documentation can be found inside our GraphQL Playground , by clicking the DOCS tab on the right-hand side. If you're new to GraphQL, you can learn more about how to use it in our API here .","title":"Start Here"},{"location":"GraphQL-API/start_here/#start-here","text":"GraphQL is not an application; rather, it is a Query Language for Web APIs.","title":"Start here"},{"location":"GraphQL-API/start_here/#try-it-out","text":"To make a request simply send a POST request to our graphql endpoint, https://api.peterportal.org/graphql/ You can try out our API live at our GraphQL Playground . Not only can you try it out, but our Playground also has the most up-to-date docs -- we highly recommend you check it out if you're interested in learning GraphQL or using our endpoint. Example Query Here is an example which returns the ID, title, and department of every course in our database. You can paste this into our GraphQL Playground , or write this in the body of a POST request. query { allCourses { id title department } }","title":"Try it out"},{"location":"GraphQL-API/start_here/#documentation","text":"\ud83d\udcc3 Documentation can be found inside our GraphQL Playground , by clicking the DOCS tab on the right-hand side. If you're new to GraphQL, you can learn more about how to use it in our API here .","title":"Documentation"},{"location":"Introduction/Getting-Started/","text":"Getting Started What is an API? An API is an Application Programming Interface . It's how programs talk to each other. PeterPortal Public API is a Web API, meaning anyone and any app can talk to it over the web! You can use Peterportal Public API to get data for apps that help students. PeterPortal API offers a RESTful API as well as a GraphQL API , and both will return JSON-encoded responses, with standard HTTP response codes and verbs. What is REST and GraphQL? REST and GraphQL are two different methods of data retrieval. While REST is the more standard and traditional approach, GraphQL is the new revolutionary approach for querying APIs. REST REST stands for representational state transfer but what does this mean? A REST API has endpoints that represent resources, or data. By making a request to these endpoints, the server will respond with a representation of the state of the resource. You can make requests using the standard HTTP methods (GET, POST, PUT, DELETE, and PATCH), but with our REST API you will primarily use GET requests. GraphQL GraphQL is a query language for APIs. In GraphQL, our data is represented as a Graph, with nodes as different data items and edges connecting their relationships. What's different about GraphQL is that users can request multiple resources in a single request and can also specify what data they want from the API. Which one should I use? To decide which one to use will almost always depend on your use case. While REST is much simpler to use, you might not want to pass up on the rich features of using GraphQL. To help you make a decision you can learn more about each of the APIs, in their respective documentation. You can check their documentation out here: REST API GraphQL API How do I get started? Just go for it. Unlike many other APIs, we do NOT require any API keys, or authentication to utilize our API. We wanted to make this API open to everyone with no barriers to start using our API. Compression By default our API uses compression to shorten response times and reduce payload size. We are using a Node.js module to compress our responses. You can learn more about this module here . We support the following compression encodings: deflate gzip However, if you would like to not compress the response from our API, you can pass in the x-no-compression header, with any value. If you do so, the response will not be compressed. curl $ curl https://api.peterportal.org/rest/v0/courses/all --header \"x-no-compression: true\" [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-no-compression\" : \"true\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ]","title":"Getting Started"},{"location":"Introduction/Getting-Started/#getting-started","text":"","title":"Getting Started"},{"location":"Introduction/Getting-Started/#what-is-an-api","text":"An API is an Application Programming Interface . It's how programs talk to each other. PeterPortal Public API is a Web API, meaning anyone and any app can talk to it over the web! You can use Peterportal Public API to get data for apps that help students. PeterPortal API offers a RESTful API as well as a GraphQL API , and both will return JSON-encoded responses, with standard HTTP response codes and verbs.","title":"What is an API?"},{"location":"Introduction/Getting-Started/#what-is-rest-and-graphql","text":"REST and GraphQL are two different methods of data retrieval. While REST is the more standard and traditional approach, GraphQL is the new revolutionary approach for querying APIs. REST REST stands for representational state transfer but what does this mean? A REST API has endpoints that represent resources, or data. By making a request to these endpoints, the server will respond with a representation of the state of the resource. You can make requests using the standard HTTP methods (GET, POST, PUT, DELETE, and PATCH), but with our REST API you will primarily use GET requests. GraphQL GraphQL is a query language for APIs. In GraphQL, our data is represented as a Graph, with nodes as different data items and edges connecting their relationships. What's different about GraphQL is that users can request multiple resources in a single request and can also specify what data they want from the API.","title":"What is REST and GraphQL?"},{"location":"Introduction/Getting-Started/#which-one-should-i-use","text":"To decide which one to use will almost always depend on your use case. While REST is much simpler to use, you might not want to pass up on the rich features of using GraphQL. To help you make a decision you can learn more about each of the APIs, in their respective documentation. You can check their documentation out here: REST API GraphQL API","title":"Which one should I use?"},{"location":"Introduction/Getting-Started/#how-do-i-get-started","text":"Just go for it. Unlike many other APIs, we do NOT require any API keys, or authentication to utilize our API. We wanted to make this API open to everyone with no barriers to start using our API.","title":"How do I get started?"},{"location":"Introduction/Getting-Started/#compression","text":"By default our API uses compression to shorten response times and reduce payload size. We are using a Node.js module to compress our responses. You can learn more about this module here . We support the following compression encodings: deflate gzip However, if you would like to not compress the response from our API, you can pass in the x-no-compression header, with any value. If you do so, the response will not be compressed. curl $ curl https://api.peterportal.org/rest/v0/courses/all --header \"x-no-compression: true\" [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-no-compression\" : \"true\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ]","title":"Compression"},{"location":"REST-API/courses/","text":"\ud83d\udcda Find information on UC Irvine courses here Try out one of these quick ways to play with our courses endpoints: curl $ curl https://api.peterportal.org/rest/v0/courses/all [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] /courses/all GET all courses Code Description 200 A list of all courses available on the UCI Catalogue. Each element is a JSON object containing information on each course (department, number, title, and description) 200 Successful Response [ ... { \"department\" : \"I&C SCI\" , \"number\" : \"51\" , \"title\" : \"Introductory Computer Organization\" , \"description\" : \"Multilevel view of system hardware and software...\" }, ... ] /courses/{courseID} GET detailed information on a specific course Parameters Parameter Description Example courseID Course department + course number (without spaces) I&CSCI53, COMPSCI122B, BIOSCI43 Responses Code Description 200 A JSON object containing every information available on a specific course. 404 Invaild ID/Course not found 200 Successful Response /courses/I&CSCI53 returns { \"id\" : \"I&C SCI 53\" , \"department\" : \"I&C SCI\" , \"number\" : \"53\" , \"school\" : \"Donald Bren School of Information and Computer Sciences\" , \"title\" : \"Principles in System Design\" , \"course_level\" : \"Lower Division (1-99)\" , \"department_alias\" : [ \"ICS\" ], \"units\" : [ 4 , 4 ], \"description\" : \"Introduces basic principles of system software: operating systems, compilers, and networking. Exposure to the following topics through theoretical and practical programming experiences: linking and loading, process and memory management, concurrency and synchronization, network communication, programming for performance, etc.\" , \"department_name\" : \"Information and Computer Science\" , \"professor_history\" : [ \"iharris\" , \"klefstad\" , \"jwongma\" ], \"prerequisite_tree\" : \"{\\\"AND\\\":[\\\"I&C SCI 51\\\"]}\" , \"prerequisite_list\" : [ \"I&C SCI 51\" ], \"prerequisite_text\" : \"I&C SCI 51\" , \"prerequisite_for\" : [ \"COMPSCI 122C\" , \"COMPSCI 131\" , \"COMPSCI 222\" , \"I&C SCI 53L\" ], \"repeatability\" : \"\" , \"grading_option\" : \"\" , \"concurrent\" : \"\" , \"same_as\" : \"\" , \"restriction\" : \"\" , \"overlap\" : \"\" , \"corequisite\" : \" I&C SCI 53L\" , \"ge_list\" : [], \"ge_text\" : \"\" , \"terms\" : [ \"2019 Spring\" , \"2020 Fall\" , \"2019 Fall\" , \"2019 Winter\" , \"2018 Winter\" , \"2018 Spring\" , \"2017 Winter\" , \"2017 Spring\" ] } 404 Not Found /courses/I&CSCI5555 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Course not found\" , }","title":"Courses"},{"location":"REST-API/courses/#coursesall","text":"GET all courses Code Description 200 A list of all courses available on the UCI Catalogue. Each element is a JSON object containing information on each course (department, number, title, and description) 200 Successful Response [ ... { \"department\" : \"I&C SCI\" , \"number\" : \"51\" , \"title\" : \"Introductory Computer Organization\" , \"description\" : \"Multilevel view of system hardware and software...\" }, ... ]","title":"/courses/all"},{"location":"REST-API/courses/#coursescourseid","text":"GET detailed information on a specific course","title":"/courses/{courseID}"},{"location":"REST-API/courses/#parameters","text":"Parameter Description Example courseID Course department + course number (without spaces) I&CSCI53, COMPSCI122B, BIOSCI43","title":"Parameters"},{"location":"REST-API/courses/#responses","text":"Code Description 200 A JSON object containing every information available on a specific course. 404 Invaild ID/Course not found 200 Successful Response /courses/I&CSCI53 returns { \"id\" : \"I&C SCI 53\" , \"department\" : \"I&C SCI\" , \"number\" : \"53\" , \"school\" : \"Donald Bren School of Information and Computer Sciences\" , \"title\" : \"Principles in System Design\" , \"course_level\" : \"Lower Division (1-99)\" , \"department_alias\" : [ \"ICS\" ], \"units\" : [ 4 , 4 ], \"description\" : \"Introduces basic principles of system software: operating systems, compilers, and networking. Exposure to the following topics through theoretical and practical programming experiences: linking and loading, process and memory management, concurrency and synchronization, network communication, programming for performance, etc.\" , \"department_name\" : \"Information and Computer Science\" , \"professor_history\" : [ \"iharris\" , \"klefstad\" , \"jwongma\" ], \"prerequisite_tree\" : \"{\\\"AND\\\":[\\\"I&C SCI 51\\\"]}\" , \"prerequisite_list\" : [ \"I&C SCI 51\" ], \"prerequisite_text\" : \"I&C SCI 51\" , \"prerequisite_for\" : [ \"COMPSCI 122C\" , \"COMPSCI 131\" , \"COMPSCI 222\" , \"I&C SCI 53L\" ], \"repeatability\" : \"\" , \"grading_option\" : \"\" , \"concurrent\" : \"\" , \"same_as\" : \"\" , \"restriction\" : \"\" , \"overlap\" : \"\" , \"corequisite\" : \" I&C SCI 53L\" , \"ge_list\" : [], \"ge_text\" : \"\" , \"terms\" : [ \"2019 Spring\" , \"2020 Fall\" , \"2019 Fall\" , \"2019 Winter\" , \"2018 Winter\" , \"2018 Spring\" , \"2017 Winter\" , \"2017 Spring\" ] } 404 Not Found /courses/I&CSCI5555 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Course not found\" , }","title":"Responses"},{"location":"REST-API/grades/","text":"\ud83c\udd70 Find information on UCI grades here. Try out one of these quick ways to play with our grades endpoints: curl $ curl https://api.peterportal.org/rest/v0/grades/raw [ ... { \"year\": \"2018-19\", \"quarter\": \"FALL\", \"department\": \"I&C SCI\", \"number\": \"33\", \"code\": 36620, \"section\": \"A\", \"instructor\": \"PATTIS, R.\", \"type\": \"LEC\", \"gradeACount\": 125, \"gradeBCount\": 72, \"gradeCCount\": 31, \"gradeDCount\": 16, \"gradeFCount\": 33, \"gradePCount\": 1, \"gradeNPCount\": 0, \"gradeWCount\": 1, \"averageGPA\": 2.84 }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/grades/raw\" ) # >>>$ response.json () [ ... [ ... { \"year\": \"2018-19\", \"quarter\": \"FALL\", \"department\": \"I&C SCI\", \"number\": \"33\", \"code\": 36620, \"section\": \"A\", \"instructor\": \"PATTIS, R.\", \"type\": \"LEC\", \"gradeACount\": 125, \"gradeBCount\": 72, \"gradeCCount\": 31, \"gradeDCount\": 16, \"gradeFCount\": 33, \"gradePCount\": 1, \"gradeNPCount\": 0, \"gradeWCount\": 1, \"averageGPA\": 2.84 }, ... ] /grades/raw GET a list of grade distribution results via a query/ Parameters Info Endpoint that utilize query params must follow by this format: ?key1=value1&key2=value2 ? is use to start the query params string with & to separate each param Warning One problem with department such as I&C SCI and CRM/LAW, since the & and / are reserved for URLs, you must use their URL encode representation. I&C SCI -> I%26C SCI CRM/LAW -> CRM%2FLAW Parameter Description Example year School year, must be <START_YEAR>-<END_YEAR> 2019-20 quarter Quarter, options are Fall, Winter, Spring Fall instructor Instructor, must following the format (<last_name>, <first_initial>.) PATTIS, R. department Department short-hand I&C SCI number Course number 32A code 5-digit course code on WebSoC 35540 Tip All params are optional and multiple can be included by using ; as a separator. i.e. key1=value1;value2&key2=value2 Tip The more you narrow down your query, the faster the response! \ud83c\udfc3\u200d\u2640\ufe0f\ud83d\udca8 \ud83d\ude0e Response Code Description 200 A list of JSON object results containing the course info, count of each grades, and average GPA 400 Invalid parameter syntax. 200 Successful Response To lookup grade distribution for I&C SCI 33 during the school year 2018-19 and 2019-20 taught by professor Pattis: /grades/raw?year=2018-19;2019-20&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns [ { \"year\" : \"2018-19\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 36620 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" , \"gradeACount\" : 125 , \"gradeBCount\" : 72 , \"gradeCCount\" : 31 , \"gradeDCount\" : 16 , \"gradeFCount\" : 33 , \"gradePCount\" : 1 , \"gradeNPCount\" : 0 , \"gradeWCount\" : 1 , \"averageGPA\" : 2.84 }, { \"year\" : \"2019-20\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 35500 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" , \"gradeACount\" : 132 , \"gradeBCount\" : 83 , \"gradeCCount\" : 41 , \"gradeDCount\" : 18 , \"gradeFCount\" : 36 , \"gradePCount\" : 0 , \"gradeNPCount\" : 3 , \"gradeWCount\" : 1 , \"averageGPA\" : 2.8 } ] 400 Bad Request /grades/raw?year=2018&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid syntax in parameters\" , \"message\" : \"Invalid syntax found in parameters. Exception occured at '2018' in the [year] query value\" , } /grades/calculated GET a list of grade distribution results via a query/ Parameters Please follow the above documentation on the /grades/raw endpoint, for information about the parameters. Response Code Description 200 A JSON object containing statistics of the grade distribution on all the courses found, and a list of the courses found. 400 Invalid parameter syntax. 200 Successful Response To lookup grade distribution for I&C SCI 33 during the school year 2018-19 and 2019-20 taught by professor Pattis: /grades/calculated?year=2018-19;2019-20&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"gradeDistribution\" : { \"SUM(gradeACount)\" : 257 , \"SUM(gradeBCount)\" : 155 , \"SUM(gradeCCount)\" : 72 , \"SUM(gradeDCount)\" : 34 , \"SUM(gradeFCount)\" : 69 , \"SUM(gradePCount)\" : 1 , \"SUM(gradeNPCount)\" : 3 , \"SUM(gradeWCount)\" : 2 , \"AVG(averageGPA)\" : 2.82 , \"COUNT()\" : 2 }, \"courseList\" : [ { \"year\" : \"2018-19\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 36620 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" }, { \"year\" : \"2019-20\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 35500 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" } ] } 400 Bad Request /grades/calculated?year=2018&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid syntax in parameters\" , \"message\" : \"Invalid syntax found in parameters. Exception occured at '2018' in the [year] query value\" , }","title":"Grades"},{"location":"REST-API/grades/#gradesraw","text":"GET a list of grade distribution results via a query/","title":"/grades/raw"},{"location":"REST-API/grades/#parameters","text":"Info Endpoint that utilize query params must follow by this format: ?key1=value1&key2=value2 ? is use to start the query params string with & to separate each param Warning One problem with department such as I&C SCI and CRM/LAW, since the & and / are reserved for URLs, you must use their URL encode representation. I&C SCI -> I%26C SCI CRM/LAW -> CRM%2FLAW Parameter Description Example year School year, must be <START_YEAR>-<END_YEAR> 2019-20 quarter Quarter, options are Fall, Winter, Spring Fall instructor Instructor, must following the format (<last_name>, <first_initial>.) PATTIS, R. department Department short-hand I&C SCI number Course number 32A code 5-digit course code on WebSoC 35540 Tip All params are optional and multiple can be included by using ; as a separator. i.e. key1=value1;value2&key2=value2 Tip The more you narrow down your query, the faster the response! \ud83c\udfc3\u200d\u2640\ufe0f\ud83d\udca8 \ud83d\ude0e","title":"Parameters"},{"location":"REST-API/grades/#response","text":"Code Description 200 A list of JSON object results containing the course info, count of each grades, and average GPA 400 Invalid parameter syntax. 200 Successful Response To lookup grade distribution for I&C SCI 33 during the school year 2018-19 and 2019-20 taught by professor Pattis: /grades/raw?year=2018-19;2019-20&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns [ { \"year\" : \"2018-19\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 36620 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" , \"gradeACount\" : 125 , \"gradeBCount\" : 72 , \"gradeCCount\" : 31 , \"gradeDCount\" : 16 , \"gradeFCount\" : 33 , \"gradePCount\" : 1 , \"gradeNPCount\" : 0 , \"gradeWCount\" : 1 , \"averageGPA\" : 2.84 }, { \"year\" : \"2019-20\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 35500 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" , \"gradeACount\" : 132 , \"gradeBCount\" : 83 , \"gradeCCount\" : 41 , \"gradeDCount\" : 18 , \"gradeFCount\" : 36 , \"gradePCount\" : 0 , \"gradeNPCount\" : 3 , \"gradeWCount\" : 1 , \"averageGPA\" : 2.8 } ] 400 Bad Request /grades/raw?year=2018&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid syntax in parameters\" , \"message\" : \"Invalid syntax found in parameters. Exception occured at '2018' in the [year] query value\" , }","title":"Response"},{"location":"REST-API/grades/#gradescalculated","text":"GET a list of grade distribution results via a query/","title":"/grades/calculated"},{"location":"REST-API/grades/#parameters_1","text":"Please follow the above documentation on the /grades/raw endpoint, for information about the parameters.","title":"Parameters"},{"location":"REST-API/grades/#response_1","text":"Code Description 200 A JSON object containing statistics of the grade distribution on all the courses found, and a list of the courses found. 400 Invalid parameter syntax. 200 Successful Response To lookup grade distribution for I&C SCI 33 during the school year 2018-19 and 2019-20 taught by professor Pattis: /grades/calculated?year=2018-19;2019-20&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"gradeDistribution\" : { \"SUM(gradeACount)\" : 257 , \"SUM(gradeBCount)\" : 155 , \"SUM(gradeCCount)\" : 72 , \"SUM(gradeDCount)\" : 34 , \"SUM(gradeFCount)\" : 69 , \"SUM(gradePCount)\" : 1 , \"SUM(gradeNPCount)\" : 3 , \"SUM(gradeWCount)\" : 2 , \"AVG(averageGPA)\" : 2.82 , \"COUNT()\" : 2 }, \"courseList\" : [ { \"year\" : \"2018-19\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 36620 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" }, { \"year\" : \"2019-20\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 35500 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" } ] } 400 Bad Request /grades/calculated?year=2018&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid syntax in parameters\" , \"message\" : \"Invalid syntax found in parameters. Exception occured at '2018' in the [year] query value\" , }","title":"Response"},{"location":"REST-API/instructors/","text":"\ud83d\udc69\u200d\ud83c\udfeb Find information on UCI instructors here. Try out one of these quick ways to play with our instructors endpoints: curl $ curl https://api.peterportal.org/rest/v0/instructors/all [ ... { \"name\": \"Michael Shindler\", \"ucinetid\": \"mikes\", \"title\": \"Assistant Professor of Teaching\", \"department\": \"Computer Science\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/instructors/all\" ) # >>>$ response.json () [ ... [ ... { \"name\": \"Michael Shindler\", \"ucinetid\": \"mikes\", \"title\": \"Assistant Professor of Teaching\", \"department\": \"Computer Science\" }, ... ] /instructors/all GET all instructors Parameters None. \ud83d\udc83 Responses Code Description 200 A list of all instructors available on the UCI Catalogue. Each element is a JSON object containing information on each instructor (name, ucinetid, title, department). 200 Successful Response [ ... { \"name\" : \"Michael Shindler\" , \"ucinetid\" : \"mikes\" , \"title\" : \"Assistant Professor of Teaching\" , \"department\" : \"Computer Science\" }, ... ] /instructors/{ucinetid} GET detailed information on a specific instructor Parameters Parameter Description Example ucinetid Can be obtained using the /all endpoint above Responses Code Description 200 A JSON object containing every information available on a specific instructor 404 Invaild UCInetID/Instructor not found 200 Successful Response /instructors/mikes returns { \"name\" : \"Michael Shindler\" , \"ucinetid\" : \"mikes\" , \"title\" : \"Assistant Professor of Teaching\" , \"department\" : \"Computer Science\" , \"schools\" : [ \"Donald Bren School of Information and Computer Sciences\" ], \"related_departments\" : [ \"COMPSCI\" , \"IN4MATX\" , \"I&C SCI\" , \"SWE\" , \"STATS\" ], \"course_history\" : [ \"COMPSCI 199\" , \"COMPSCI H198\" , \"I&C SCI 46\" , \"COMPSCI 167\" , \"COMPSCI 161\" , \"COMPSCI 269S\" , \"COMPSCI 260P\" , \"COMPSCI 162\" ] } 404 Not Found /instructors/nonexistent returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Instructor not found\" , }","title":"Instructors"},{"location":"REST-API/instructors/#instructorsall","text":"GET all instructors","title":"/instructors/all"},{"location":"REST-API/instructors/#parameters","text":"None. \ud83d\udc83","title":"Parameters"},{"location":"REST-API/instructors/#responses","text":"Code Description 200 A list of all instructors available on the UCI Catalogue. Each element is a JSON object containing information on each instructor (name, ucinetid, title, department). 200 Successful Response [ ... { \"name\" : \"Michael Shindler\" , \"ucinetid\" : \"mikes\" , \"title\" : \"Assistant Professor of Teaching\" , \"department\" : \"Computer Science\" }, ... ]","title":"Responses"},{"location":"REST-API/instructors/#instructorsucinetid","text":"GET detailed information on a specific instructor","title":"/instructors/{ucinetid}"},{"location":"REST-API/instructors/#parameters_1","text":"Parameter Description Example ucinetid Can be obtained using the /all endpoint above","title":"Parameters"},{"location":"REST-API/instructors/#responses_1","text":"Code Description 200 A JSON object containing every information available on a specific instructor 404 Invaild UCInetID/Instructor not found 200 Successful Response /instructors/mikes returns { \"name\" : \"Michael Shindler\" , \"ucinetid\" : \"mikes\" , \"title\" : \"Assistant Professor of Teaching\" , \"department\" : \"Computer Science\" , \"schools\" : [ \"Donald Bren School of Information and Computer Sciences\" ], \"related_departments\" : [ \"COMPSCI\" , \"IN4MATX\" , \"I&C SCI\" , \"SWE\" , \"STATS\" ], \"course_history\" : [ \"COMPSCI 199\" , \"COMPSCI H198\" , \"I&C SCI 46\" , \"COMPSCI 167\" , \"COMPSCI 161\" , \"COMPSCI 269S\" , \"COMPSCI 260P\" , \"COMPSCI 162\" ] } 404 Not Found /instructors/nonexistent returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Instructor not found\" , }","title":"Responses"},{"location":"REST-API/schedule/","text":"Find information on UCI Schedule of Classes here. Try out one of these quick ways to play with our grades endpoints: curl $ curl https://api.peterportal.org/rest/v0/schedule/soc?term = 2018 %20Fall & department = COMPSCI & courseNumber = 161 { \"schools\": [ { \"departments\": [ { \"courseNumberRangeComments\": [], \"courses\": [ { \"courseComment\": \"\", \"courseNumber\": \"161\", \"courseTitle\": \"DES&ANALYS OF ALGOR\", \"deptCode\": \"COMPSCI\", \"prerequisiteLink\": \"https://www.reg.uci.edu/cob/prrqcgi?term=201892&dept=COMPSCI&action=view_by_term#161\", \"sections\": [ ... { \"finalExam\": \"\", \"instructors\": [ \"KUMAR, A.\", \"DILLENCOURT, M.\" ], \"maxCapacity\": \"108\", \"meetings\": [ { \"bldg\": \"SSL 248\", \"days\": \"TuTh\", \"time\": \" 5:00- 5:50p\" } ], \"numCurrentlyEnrolled\": { \"sectionEnrolled\": \"\", \"totalEnrolled\": \"105\" }, \"numNewOnlyReserved\": \"\", \"numOnWaitlist\": \"\", \"numRequested\": \"143\", \"restrictions\": \"A\", \"sectionCode\": \"34191\", \"sectionComment\": \"\", \"sectionNum\": \"1\", \"sectionType\": \"Dis\", \"status\": \"OPEN\", \"units\": \"0\" }, ... ], \"deptCode\": \"COMPSCI\", \"deptComment\": \"...\", \"deptName\": \"Computer Science\", \"sectionCodeRangeComments\": [] } ], \"schoolComment\": \"...\", \"schoolName\": \"Donald Bren School of Information and Computer Sciences\" } ] } python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/schedule/soc?term=2018%20Fall&department=COMPSCI&courseNumber=161\" ) # >>>$ response.json () { \"schools\": [ { \"departments\": [ { \"courseNumberRangeComments\": [], \"courses\": [ { \"courseComment\": \"\", \"courseNumber\": \"161\", \"courseTitle\": \"DES&ANALYS OF ALGOR\", \"deptCode\": \"COMPSCI\", \"prerequisiteLink\": \"https://www.reg.uci.edu/cob/prrqcgi?term=201892&dept=COMPSCI&action=view_by_term#161\", \"sections\": [ ... { \"finalExam\": \"\", \"instructors\": [ \"KUMAR, A.\", \"DILLENCOURT, M.\" ], \"maxCapacity\": \"108\", \"meetings\": [ { \"bldg\": \"SSL 248\", \"days\": \"TuTh\", \"time\": \" 5:00- 5:50p\" } ], \"numCurrentlyEnrolled\": { \"sectionEnrolled\": \"\", \"totalEnrolled\": \"105\" }, \"numNewOnlyReserved\": \"\", \"numOnWaitlist\": \"\", \"numRequested\": \"143\", \"restrictions\": \"A\", \"sectionCode\": \"34191\", \"sectionComment\": \"\", \"sectionNum\": \"1\", \"sectionType\": \"Dis\", \"status\": \"OPEN\", \"units\": \"0\" }, ... ], \"deptCode\": \"COMPSCI\", \"deptComment\": \"...\", \"deptName\": \"Computer Science\", \"sectionCodeRangeComments\": [] } ], \"schoolComment\": \"...\", \"schoolName\": \"Donald Bren School of Information and Computer Sciences\" } ] } /schedule/soc GET schedule of classes data This API allows access to school, department, course, and section data in a hierarchical JSON format. It pulls information from the schedule of classes (WebSoc). Parameters Info Endpoint that utilize query params must follow by this format: ?key1=value1&key2=value2 ? is use to start the query params string with & to separate each param Warning One problem with department such as I&C SCI and CRM/LAW, since the & and / are reserved for URLs, you must use their URL encode representation. I&C SCI -> I%26C SCI CRM/LAW -> CRM%2FLAW Descriptions found here Name Formatting Notes term [Year] ['Fall'|'Winter'|'Spring'|'Summer1'|'Summer2'|'Summer10wk'] Example: '2017 Fall' Default: ' ' Required. Schedule for your selected term must be available on WebSoc. ge ['ANY'|'GE-1A'|'GE-1B'|'GE-2'|'GE-3'|'GE-4'|'GE-5A'|'GE-5B'|'GE-6'|'GE-7'|'GE-8'] Example: 'GE-1B' Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName department List of available departments to search available in file depts.txt Example: 'I&C SCI' Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName courseNumber Any valid course number or range Example: '32A' OR '31-33' Default: ' ' division ['ALL'|'LowerDiv'|'UpperDiv'|'Graduate'] Example: 'LowerDiv' Default: 'ALL' sectionCodes Any valid 5-digit course code or range Example: \"36531\" OR \"36520-36536\" Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName instructorName Any valid instructor last name or part of last name Example: 'Thornton' Default: ' ' Enter last name only courseTitle Any text Example: 'Intro' Default: ' ' sectionType ['ALL'|'ACT'|'COL'|'DIS'|'FLD'|'LAB'|'LEC'|'QIZ'|'RES'|'SEM'|'STU'|'TAP'|'TUT'] Example: 'LAB' Default: 'ALL' units Any integer or decimal with only tenths place precision, or 'VAR' to look for variable unit classes only. Example: '5' OR '1.3' Default: ' ' days ['M'|'T'|'W'|'Th'|'F'] or a combination of these days Example: 'T' OR 'MWF' Default: ' ' startTime Any time in 12 hour format Example: '10:00AM' OR '5:00PM' Default: ' ' Only enter sharp hours endTime Any time in 12 hour format Example: '12:00AM' OR '6:00PM' Default: ' ' Only enter sharp hours maxCapacity Exact number like '300' or modified with '<' or '>' to indicate less than specified or greater than specified. Example: '>256' OR '19' OR '<19' Default: ' ' fullCourses ['ANY'|'SkipFullWaitlist'|'FullOnly'|'OverEnrolled'] 'SkipFullWaitlist' means that full courses will be included if there's space on the wait-list 'FullOnly' means only full courses will be retrieved 'OverEnrolled' means only over-enrolled courses will be retrieved Example:'SkipFullWaitlist' Default: 'ANY' cancelledCourses ['Exclude'|'Include'|'Only'] Example: 'Include' Default: 'EXCLUDE' building Any valid building code Example: 'DBH' Default: ' ' The value is a building code. Building codes found here: https://www.reg.uci.edu/addl/campus/ room Any valid room number Example: '223' Default: ' ' You must specify a building code if you specify a room number Response Code Description 200 A list of JSON object results containing the course info, count of each grades, and average GPA 400 Invalid parameter syntax. 200 Successful Response To find the schedule of COMPSCI 161 in 2018 Fall: /schedule/soc?term=2018%20Fall&department=COMPSCI&courseNumber=161 returns { \"schools\" : [ { \"departments\" : [ { \"courseNumberRangeComments\" : [], \"courses\" : [ { \"courseComment\" : \"\" , \"courseNumber\" : \"161\" , \"courseTitle\" : \"DES&ANALYS OF ALGOR\" , \"deptCode\" : \"COMPSCI\" , \"prerequisiteLink\" : \"https://www.reg.uci.edu/cob/prrqcgi?term=201892&dept=COMPSCI&action=view_by_term#161\" , \"sections\" : [ ... { \"finalExam\" : \"\" , \"instructors\" : [ \"KUMAR, A.\" , \"DILLENCOURT, M.\" ], \"maxCapacity\" : \"108\" , \"meetings\" : [ { \"bldg\" : \"SSL 248\" , \"days\" : \"TuTh\" , \"time\" : \" 5:00- 5:50p\" } ], \"numCurrentlyEnrolled\" : { \"sectionEnrolled\" : \"\" , \"totalEnrolled\" : \"105\" }, \"numNewOnlyReserved\" : \"\" , \"numOnWaitlist\" : \"\" , \"numRequested\" : \"143\" , \"restrictions\" : \"A\" , \"sectionCode\" : \"34191\" , \"sectionComment\" : \"\" , \"sectionNum\" : \"1\" , \"sectionType\" : \"Dis\" , \"status\" : \"OPEN\" , \"units\" : \"0\" }, ... ], \"deptCode\" : \"COMPSCI\" , \"deptComment\" : \"...\" , \"deptName\" : \"Computer Science\" , \"sectionCodeRangeComments\" : [] } ], \"schoolComment\" : \"...\" , \"schoolName\" : \"Donald Bren School of Information and Computer Sciences\" } ] } 400 Bad Request /schedule/soc?term=2018%20Fall&department=COMPSCI&incorrect=161 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Unable to complete websoc-api query\" } This endpoint is based off of this npm package with help from AntAlmanac developers.","title":"Schedule of Classes"},{"location":"REST-API/schedule/#schedulesoc","text":"GET schedule of classes data This API allows access to school, department, course, and section data in a hierarchical JSON format. It pulls information from the schedule of classes (WebSoc).","title":"/schedule/soc"},{"location":"REST-API/schedule/#parameters","text":"Info Endpoint that utilize query params must follow by this format: ?key1=value1&key2=value2 ? is use to start the query params string with & to separate each param Warning One problem with department such as I&C SCI and CRM/LAW, since the & and / are reserved for URLs, you must use their URL encode representation. I&C SCI -> I%26C SCI CRM/LAW -> CRM%2FLAW Descriptions found here Name Formatting Notes term [Year] ['Fall'|'Winter'|'Spring'|'Summer1'|'Summer2'|'Summer10wk'] Example: '2017 Fall' Default: ' ' Required. Schedule for your selected term must be available on WebSoc. ge ['ANY'|'GE-1A'|'GE-1B'|'GE-2'|'GE-3'|'GE-4'|'GE-5A'|'GE-5B'|'GE-6'|'GE-7'|'GE-8'] Example: 'GE-1B' Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName department List of available departments to search available in file depts.txt Example: 'I&C SCI' Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName courseNumber Any valid course number or range Example: '32A' OR '31-33' Default: ' ' division ['ALL'|'LowerDiv'|'UpperDiv'|'Graduate'] Example: 'LowerDiv' Default: 'ALL' sectionCodes Any valid 5-digit course code or range Example: \"36531\" OR \"36520-36536\" Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName instructorName Any valid instructor last name or part of last name Example: 'Thornton' Default: ' ' Enter last name only courseTitle Any text Example: 'Intro' Default: ' ' sectionType ['ALL'|'ACT'|'COL'|'DIS'|'FLD'|'LAB'|'LEC'|'QIZ'|'RES'|'SEM'|'STU'|'TAP'|'TUT'] Example: 'LAB' Default: 'ALL' units Any integer or decimal with only tenths place precision, or 'VAR' to look for variable unit classes only. Example: '5' OR '1.3' Default: ' ' days ['M'|'T'|'W'|'Th'|'F'] or a combination of these days Example: 'T' OR 'MWF' Default: ' ' startTime Any time in 12 hour format Example: '10:00AM' OR '5:00PM' Default: ' ' Only enter sharp hours endTime Any time in 12 hour format Example: '12:00AM' OR '6:00PM' Default: ' ' Only enter sharp hours maxCapacity Exact number like '300' or modified with '<' or '>' to indicate less than specified or greater than specified. Example: '>256' OR '19' OR '<19' Default: ' ' fullCourses ['ANY'|'SkipFullWaitlist'|'FullOnly'|'OverEnrolled'] 'SkipFullWaitlist' means that full courses will be included if there's space on the wait-list 'FullOnly' means only full courses will be retrieved 'OverEnrolled' means only over-enrolled courses will be retrieved Example:'SkipFullWaitlist' Default: 'ANY' cancelledCourses ['Exclude'|'Include'|'Only'] Example: 'Include' Default: 'EXCLUDE' building Any valid building code Example: 'DBH' Default: ' ' The value is a building code. Building codes found here: https://www.reg.uci.edu/addl/campus/ room Any valid room number Example: '223' Default: ' ' You must specify a building code if you specify a room number","title":"Parameters"},{"location":"REST-API/schedule/#response","text":"Code Description 200 A list of JSON object results containing the course info, count of each grades, and average GPA 400 Invalid parameter syntax. 200 Successful Response To find the schedule of COMPSCI 161 in 2018 Fall: /schedule/soc?term=2018%20Fall&department=COMPSCI&courseNumber=161 returns { \"schools\" : [ { \"departments\" : [ { \"courseNumberRangeComments\" : [], \"courses\" : [ { \"courseComment\" : \"\" , \"courseNumber\" : \"161\" , \"courseTitle\" : \"DES&ANALYS OF ALGOR\" , \"deptCode\" : \"COMPSCI\" , \"prerequisiteLink\" : \"https://www.reg.uci.edu/cob/prrqcgi?term=201892&dept=COMPSCI&action=view_by_term#161\" , \"sections\" : [ ... { \"finalExam\" : \"\" , \"instructors\" : [ \"KUMAR, A.\" , \"DILLENCOURT, M.\" ], \"maxCapacity\" : \"108\" , \"meetings\" : [ { \"bldg\" : \"SSL 248\" , \"days\" : \"TuTh\" , \"time\" : \" 5:00- 5:50p\" } ], \"numCurrentlyEnrolled\" : { \"sectionEnrolled\" : \"\" , \"totalEnrolled\" : \"105\" }, \"numNewOnlyReserved\" : \"\" , \"numOnWaitlist\" : \"\" , \"numRequested\" : \"143\" , \"restrictions\" : \"A\" , \"sectionCode\" : \"34191\" , \"sectionComment\" : \"\" , \"sectionNum\" : \"1\" , \"sectionType\" : \"Dis\" , \"status\" : \"OPEN\" , \"units\" : \"0\" }, ... ], \"deptCode\" : \"COMPSCI\" , \"deptComment\" : \"...\" , \"deptName\" : \"Computer Science\" , \"sectionCodeRangeComments\" : [] } ], \"schoolComment\" : \"...\" , \"schoolName\" : \"Donald Bren School of Information and Computer Sciences\" } ] } 400 Bad Request /schedule/soc?term=2018%20Fall&department=COMPSCI&incorrect=161 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Unable to complete websoc-api query\" } This endpoint is based off of this npm package with help from AntAlmanac developers.","title":"Response"},{"location":"REST-API/start_here/","text":"Start here What is a RESTful API? To call a Web API RESTful, or REST, means that it meets a set of communication standards. First of all, REST is an an acronym: RE presentational S tate T ransfer. But that doesn't really help understanding it :'( There's a lot that REST APIs are used for, but I'll explain it more in the scope of what you can do with PeterPortal API. A REST API is Stateless. This means that it does not rely on nor take into account previous messages that you sent to it. That means for each request you send to it, you need to send all the information that the REST API needs to understand your request. Our REST API returns and accepts JSON . REST APIs are not restricted to JSON; however, that is the standard you will see for almost every public Web API. JSON syntax is similar to a Python dictionary . The API The REST Endpoint URL is https://api.peterportal.org/rest/v0/ REST Services can be accessed through GET actions. Our endpoints return data in JSON. Error Messages Error messages will look like this: { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Error\" , \"message\" : \"Error message\" } If you are gettnig error messages, each endpoints respective documentation will give more details and possible reasons for why they may occur. API Reference Here are some of the endpoints you might want to use in your project. Courses Instructors Grades Schedule of Classes curl $ curl https://api.peterportal.org/rest/v0/courses/all [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ]","title":"Start Here"},{"location":"REST-API/start_here/#start-here","text":"","title":"Start here"},{"location":"REST-API/start_here/#what-is-a-restful-api","text":"To call a Web API RESTful, or REST, means that it meets a set of communication standards. First of all, REST is an an acronym: RE presentational S tate T ransfer. But that doesn't really help understanding it :'( There's a lot that REST APIs are used for, but I'll explain it more in the scope of what you can do with PeterPortal API. A REST API is Stateless. This means that it does not rely on nor take into account previous messages that you sent to it. That means for each request you send to it, you need to send all the information that the REST API needs to understand your request. Our REST API returns and accepts JSON . REST APIs are not restricted to JSON; however, that is the standard you will see for almost every public Web API. JSON syntax is similar to a Python dictionary .","title":"What is a RESTful API?"},{"location":"REST-API/start_here/#the-api","text":"The REST Endpoint URL is https://api.peterportal.org/rest/v0/ REST Services can be accessed through GET actions. Our endpoints return data in JSON.","title":"The API"},{"location":"REST-API/start_here/#error-messages","text":"Error messages will look like this: { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Error\" , \"message\" : \"Error message\" } If you are gettnig error messages, each endpoints respective documentation will give more details and possible reasons for why they may occur.","title":"Error Messages"},{"location":"REST-API/start_here/#api-reference","text":"Here are some of the endpoints you might want to use in your project. Courses Instructors Grades Schedule of Classes curl $ curl https://api.peterportal.org/rest/v0/courses/all [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ]","title":"API Reference"}]}